% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quant-iterated_Ci.R
\name{iterate_over_Ci}
\alias{iterate_over_Ci}
\title{Iterate over possible Ci values}
\usage{
iterate_over_Ci(
  S,
  grid.size = 1000,
  omit_grid_borders = TRUE,
  grid.start = 0,
  grid.stop = 1,
  verbose = FALSE,
  verbose_opt = FALSE,
  control = list(),
  extend_grid_at_borders = FALSE,
  log_level = TRUE
)
}
\arguments{
\item{S}{\strong{list} \cr
A list of biadjacency matrix of the bipartite peptide-protein graph (named "X")
and measured peptide ratios (named "fc").}

\item{grid.size}{\strong{integer} \cr
The number of grid points for the Cis.}

\item{omit_grid_borders}{\strong{logical} \cr
If \code{TRUE}, omit exact value of 1 and 0 from the grid (recommended, as they may cause numerical issues).}

\item{grid.start}{\strong{integer} \cr
The start of the grid (default is 0).}

\item{grid.stop}{\strong{integer} \cr
The end of the grid (default is 1).}

\item{verbose}{\strong{logical} \cr
If \code{TRUE}, print additional information (see solnp function).}

\item{verbose_opt}{\strong{logical} \cr
The \code{verbose} argument of the \code{\link[=minimize_squared_error]{minimize_squared_error()}} function.}

\item{control}{\strong{list} \cr
The \code{control} object to be passed to the \code{\link[=minimize_squared_error]{minimize_squared_error()}} function.}

\item{extend_grid_at_borders}{\strong{logical} \cr
If \code{TRUE}, the grid will be extend close to the borders (0 and 1).
While exact values of 0 and 1 may cause numerical problems,
values close to those may be valuable to get a better estimate of the protein ratios.}

\item{log_level}{\strong{logical} \cr
The \code{log_level} argument will passed to the \code{\link[=minimize_squared_error]{minimize_squared_error()}} function.}
}
\value{
A dataframe containing the optimal Ci and Ri values together with the reached minimal error term.
}
\description{
Iterate over possible Ci values
}
\details{
With minimize_squared_error() each protein node receives one estimate for the protein ratio. However, in some cases, there are multiple possible values for the protein ratios that lead to the same, minimal error term.
To get a better coverage of the optimal solutions, this function iterates over a grid of possible weights Ci for each protein node.
For each protein node, the Ci value if fixed on a point on the grid, while the other Ci values and all Ri values are optimized using minimize_squared_error().
The resulting table can be used to assess a range of possible solutions for the protein ratios.
}
\examples{
M <- matrix(c(1, 0, 1, 1), nrow = 2, byrow = TRUE)
rj <- c(0.6, 1.2)
S <- list(X = M, fc = rj)
minimize_squared_error(S)
}
\seealso{
\code{\link[=minimize_squared_error]{minimize_squared_error()}}, \code{\link[=automated_analysis_iterated_Ci]{automated_analysis_iterated_Ci()}}
}
